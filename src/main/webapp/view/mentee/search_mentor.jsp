<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><html><head>    <title>Home</title>    <link rel="stylesheet"  href="${pageContext.request.contextPath}/css/search_mentor/search_mentor.css">    <link rel="stylesheet"  href="${pageContext.request.contextPath}/css/search_mentor/side_select.css">    <link rel="stylesheet" href="${pageContext.request.contextPath}/css/search_mentor/pagination.css">    <!-- Fontawesome CDN Link -->    <link rel="stylesheet"          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">    <!-- Google Fonts -->    <link            href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"            rel="stylesheet"    />    <!-- MDB -->    <link            href="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/7.2.0/mdb.min.css"            rel="stylesheet"    />    <!-- SweetAlert2 -->    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>    <!-- Bootstrap CSS -->    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"></head><body>    <jsp:include page="../common/header.jsp"></jsp:include><div class="main" style="background-color: rgb(246, 255, 253)">    <div class="image"></div>    <div class="body">        <div class="side">            <div class="btn-filter">                <button type="button" class="btn btn-outline-danger remove" data-mdb-ripple-init data-mdb-ripple-color="dark" onclick="removeAll()">                    Remove all <i class="fa-sharp fa-solid fa-filter-circle-xmark"></i></button>                <button type="button" class="btn btn-outline-success filter" data-mdb-ripple-init data-mdb-ripple-color="dark" onclick="filter()">                    Filter <i class="fa-sharp fa-solid fa-filter"></i></button>            </div>            <c:forEach items="${requestScope.list_cate}" var="cate">                <div class="select-content">                    <div class="select-btn">                        <span class="btn-text">${cate.name}</span>                        <span class="arrow-dwn" style="background-color: #07ad90">                            <i class="fa-solid fa-chevron-down"></i>                        </span>                    </div>                    <ul class="list-items">                        <c:forEach items="${requestScope.list_skill}" var="skill">                            <c:if test="${skill.category.id == cate.id}">                                <li class="item">                                    <label>                                        <input type="checkbox" class="checkbox" ${skill.id == 2 ? "checked" : ""}>                                    </label>                                    <span class="item-text">${skill.name}</span>                                </li>                            </c:if>                        </c:forEach>                    </ul>                </div>            </c:forEach>        </div>        <div class="content">            <div class="search_order">                <div class="search">                    <div class="selected" id="selected">Filter Courses ... </div>                </div>                <div class="order-content">                    <label>                        <select>                            <option>Rate</option>                            <option>Popular</option>                        </select>                    </label>                </div>            </div>            <div class="content_body">                <c:forEach items="${requestScope.list_mentor}" var="mentor">                    <div class="cart">                        <div class="avatar">this is avatar</div>                        <div class="info">                            <span style="font-size: 16px; margin: 5px 0">${mentor.account.name}</span><br>                            <span style="font-size: 13px; margin: 5px 0" class="dobSpan" data-dob="${mentor.account.dob}" ></span><br>                            <span style="font-size: 12px; margin: 5px 0; opacity: 70%">                                <c:forEach begin="0" end="2" items="${mentor.skills}" varStatus="i" var="skill">                                    ${skill.name}                                    <c:if test="${not i.last}">, </c:if>                                </c:forEach>                                <c:if test="${mentor.skills.size() > 3}">. . .</c:if>                            </span>                        </div>                        <div class="rating">                            <div class="stars-outer">                                <div class="stars-inner" data-rating="${mentor.rating}"></div>                            </div>                            <div class="number-booking">                                <span>${mentor.totalBookings}</span>                                <i class="fa-solid fa-user-graduate"></i>                            </div>                        </div>                        <div class="btn-action">                            <button type="button" class="btn btn-outline-success btn-rounded booking" data-mdb-ripple-init  data-mdb-ripple-color="dark">Booking</button>                        </div>                    </div>                </c:forEach>            </div>            <div class="content_pagination">                <nav aria-label="Page navigation">                    <ul class="pagination" >                            <li class="page-item" >                                <a class="page-link" <c:if test="${requestScope.page > 1}">                                                       href="SearchMentor?page=${requestScope.page - 1}"                                                    </c:if>                                   aria-label="Previous">                                    <span aria-hidden="true">&laquo;</span>                                    <span class="sr-only">Previous</span>                                </a>                            </li>                        <c:forEach begin="1" end="${requestScope.end_page}" var="i">                            <li class="page-item ${requestScope.page == i ? 'active' : ''}"><a class="page-link" href="SearchMentor?page=${i}">${i}</a></li>                        </c:forEach>                            <li class="page-item">                                <a class="page-link" <c:if test="${requestScope.page < requestScope.end_page}">                                                        href="SearchMentor?page=${requestScope.page + 1}"                                                     </c:if>                                   aria-label="Next">                                    <span aria-hidden="true">&raquo;</span>                                    <span class="sr-only">Next</span>                                </a>                            </li>                    </ul>                </nav>            </div>        </div>    </div></div>    <script>    document.addEventListener('DOMContentLoaded', () => {        // Get all select buttons and items        const selectBtns = document.querySelectorAll(".select-btn");        const items = document.querySelectorAll(".list-items .item");        let checkedCount = 0;        const maxChecked = 5;        // Add event listeners to all select buttons        selectBtns.forEach(selectBtn => {            selectBtn.addEventListener("click", (event) => {                selectBtn.classList.toggle("open");                event.stopPropagation(); // Prevent click event from propagating to parent elements            });        });        // Add event listeners to all list items        items.forEach(item => {            const checkbox = item.querySelector('input[type="checkbox"]');            if (checkbox.checked) {                checkedCount++;            }            item.addEventListener("click", (event) => {                if (event.target !== checkbox) {                    checkbox.checked = !checkbox.checked;                }                if (checkbox.checked) {                    if (checkedCount < maxChecked) {                        checkedCount++;                    } else {                        checkbox.checked = false;                        Swal.fire({                            icon: "warning",                            title: "Oops...",                            text: "You can only select up to 5 skills!",                        });                    }                } else {                    checkedCount--;                }                displaySelectedItems();            });        });        function displaySelectedItems() {            const selectedItemsContainer = document.getElementById("selected");            if (selectedItemsContainer) {                selectedItemsContainer.innerHTML = ''; // Clear previous items                const selectedItemsArray = []; // Array to hold selected item names                // Loop through all items to find checked ones                items.forEach(item => {                    const checkbox = item.querySelector('input[type="checkbox"]');                    if (checkbox.checked) {                        const itemName = item.querySelector('.item-text').innerText;                        // Create a span element for the selected item                        const selectedItem = document.createElement('span');                        selectedItem.classList.add('selected-item');                        selectedItem.textContent = itemName;                        // Create a button to remove the item                        const removeButton = document.createElement('button');                        removeButton.textContent = "X";                        removeButton.onclick = function() {                            checkbox.checked = false; // Uncheck the checkbox                            checkedCount--; // Decrement checked count                            displaySelectedItems(); // Refresh the selected items                        };                        selectedItem.appendChild(removeButton);                        selectedItemsContainer.appendChild(selectedItem);                        selectedItemsArray.push(itemName); // Add item name to array                    }                });                if (checkedCount === 0) {                    selectedItemsContainer.innerHTML = 'Filter Courses ... ';                }                console.log(selectedItemsArray); // Log the array of selected items            }        }        window.removeAll = function() {            items.forEach(item => {                const checkbox = item.querySelector('input[type="checkbox"]');                checkbox.checked = false;            });            checkedCount = 0;            displaySelectedItems();        };        window.filter = function() {            if (checkedCount === 0) {                Swal.fire({                    icon: "warning",                    title: "Nothing to filter!",                    text: "Please select at least 1 skill to filter!",                });            } else {                const selectedSkills = [];                items.forEach(item => {                    const checkbox = item.querySelector('input[type="checkbox"]');                    if (checkbox.checked) {                        selectedSkills.push(item.querySelector('.item-text').innerText);                    }                });                console.log("Selected skills to filter:", selectedSkills);                // Implement your filtering logic here using selectedSkills            }        };        // Total number of stars        const starsTotal = 5;        // Get all star rating elements        const starContainers = document.querySelectorAll('.stars-inner');        starContainers.forEach(starsInner => {            // Get the rating from the data-rating attribute            const rating = parseFloat(starsInner.getAttribute('data-rating'));            console.log(starsInner.getAttribute('data-rating'));            // Calculate the percentage of stars to fill            const starPercentage = (rating / starsTotal) * 100;            // Set the width of the stars-inner to the calculated percentage            starsInner.style.width = starPercentage + '%';        });        // Display the selected items initially (if any checkboxes are checked)        displaySelectedItems();    });    function ageCalc(dateString) {        // Parse the date string into a Date object        const dob = new Date(dateString);        // Calculate the current date        const today = new Date();        // Calculate the age        let age = today.getFullYear() - dob.getFullYear();        // Check if the birthday has occurred this year        if (today.getMonth() < dob.getMonth() ||            (today.getMonth() === dob.getMonth() && today.getDate() < dob.getDate())) {            age--;        }        // Return the calculated age        console.log(age);        return age;    }    document.addEventListener('DOMContentLoaded', () => {        // Get all elements with the class "dobSpan"        const dobSpans = document.querySelectorAll('.dobSpan');        // Loop through each span element and calculate the age        dobSpans.forEach(function(span) {            // Get the date of birth from the data-dob attribute            const dob = span.getAttribute('data-dob');            // Calculate the age using the ageCalc() function            const age = ageCalc(dob);            // Set the calculated age as the content of the span            span.textContent = age + " years old";        });    });</script>    <!-- Separate Popper and Bootstrap JS -->    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script></body>